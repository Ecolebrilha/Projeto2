import React, { useState, useEffect } from 'react';
import axios from 'axios';


Função App


jsx
function App() {
  const [payments, setPayments] = useState([]);
  const [formData, setFormData] = useState({
    nome: '',
    descricao: '',
    clienteFornecedor: '',
    valor: '',
    formPagamento: '',
    categoria: '',
    tipo: '',
  });
  const [loading, setLoading] = useState(true);
  const [receitas, setReceitas] = useState([]);
  const [despesas, setDespesas] = useState([]);


Métodos de API


jsx
const loadReceitas = async () => {
  try {
    const response = await axios.get('(link unavailable)');
    setReceitas(response.data);
  } catch (error) {
    console.error('Erro ao carregar receitas:', error);
  }
};

const loadDespesas = async () => {
  try {
    const response = await axios.get('(link unavailable)');
    setDespesas(response.data);
  } catch (error) {
    console.error('Erro ao carregar despesas:', error);
  }
};

const createReceita = async (data) => {
  try {
    await axios.post('(link unavailable)', data);
    loadReceitas();
  } catch (error) {
    console.error('Erro ao criar receita:', error);
  }
};

const updateReceita = async (id, data) => {
  try {
    await axios.put(`(link unavailable), data);
    loadReceitas();
  } catch (error) {
    console.error('Erro ao atualizar receita:', error);
  }
};

const deleteReceita = async (id) => {
  try {
    await axios.delete(`(link unavailable));
    loadReceitas();
  } catch (error) {
    console.error('Erro ao deletar receita:', error);
  }
};

const createDespesa = async (data) => {
  try {
    await axios.post('(link unavailable)', data);
    loadDespesas();
  } catch (error) {
    console.error('Erro ao criar despesa:', error);
  }
};

const updateDespesa = async (id, data) => {
  try {
    await axios.put(`(link unavailable), data);
    loadDespesas();
  } catch (error) {
    console.error('Erro ao atualizar despesa:', error);
  }
};

const deleteDespesa = async (id) => {
  try {
    await axios.delete(`(link unavailable));
    loadDespesas();
  } catch (error) {
    console.error('Erro ao deletar despesa:', error);
  }
};


Efeitos Colaterais


jsx
useEffect(() => {
  loadReceitas();
  loadDespesas();
}, []);


Renderização


jsx
return (
  <div className="App">
    <h1>Gerenciamento de Receitas e Despesas</h1>
    <form onSubmit={(e) => {
      e.preventDefault();
      if ((link unavailable)) {
        updateReceita((link unavailable), formData);
      } else {
        createReceita(formData);
      }
    }}>

      <button type="submit">{(link unavailable) ? 'Atualizar Receita' : 'Adicionar Receita'}</button>
    </form>
    <h2>Lista de Receitas</h2>
    <table>
      <thead>
        <tr>
          <th>Nome</th>
          <th>Valor</th>
          <th>Categoria</th>
          <th>Tipo</th>
        </tr>
      </thead>
      <tbody>
        {receitas.map((receita) => (
          <tr key={(link unavailable)}>
            <td>{receita.nome}</td>
            <td>R$ {receita.valor}</td>
            <td>{receita.categoria}</td>
            <td>{receita.tipo}</td>
            <td>
 